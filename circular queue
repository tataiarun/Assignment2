class MyCircularQueue {
    private int [] arr;
    private int rear,front;
    public MyCircularQueue(int N) {
        this.arr = new int[N];
        this.front = -1;
        this.rear = -1;
        }
    
    public boolean enQueue(int value) {
        if(front == -1 && rear == -1) {
            rear = front = 0;
            arr[rear] = value;
            return true;
        } else if((rear + 1) % arr.length == front) {
            return false;
        } else {
            rear = (rear + 1) % arr.length;
            arr[rear] = value;
            return true;
        }
    }
    
    public boolean deQueue() {
        if(rear == -1 && front == -1) {
            return false;
        } else if (front == rear) {
            front = rear = -1;
            return true;
        } else {
            front = (front + 1) % arr.length;
            return true;
        }
    }
    
    public int Front() {
        if(isEmpty()) {
            return -1;
        }
        return arr[front];
    }
    
    public int Rear() {
        if(isEmpty()) {
            return -1;
        }
        return arr[rear];
    }
    
    public boolean isEmpty() {
        return (front == -1 && rear == -1);
    }
    
    public boolean isFull() {
        return (rear + 1) % arr.length == front;
    }}
